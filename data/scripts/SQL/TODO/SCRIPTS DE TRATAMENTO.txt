SET FOREIGN_KEY_CHECKS = 0
--GERAR CARGA
SELECT * FROM produotos WHERE alterado = ',';
SELECT * FROM codigosauxiliares WHERE alterado = ',';

SELECT * FROM pessoas WHERE sincronizado = ',';
--RESET CARGA

UPDATE produotos SET alterado = ',';
UPDATE pessoas SET sincronizado = ',';

UPDATE codigosauxiliares SET alterado = ',';
UPDATE produotos SET gtin = referencia WHERE alterado = ','
________________________________________________________________________________________________________________________
TRATAMENTO DE DADOS PRODUOTOS
________________________________________________________________________________________________________________________
--ATUALIZA CAMPOS TABELA
update produotos set iat='A',ippt='T',alterado=',',custooperacional=0, fatorDeMultiplicacao =1,
fatorQtdUnd =0, quantidadeMaximaVenda =0, totalComprado =0,PRODUTOBALANCA=0,
estoquemaximo=0, produtoMultiLoja =0, alterarPrecoMultiLoja =0, pedeNumeroSerieVenda =0, pagaComissao =0,
limitarDesconto =0, finalidadeProduto =1, descricaoLivre =0, bloquearQuantidadeVenda =0, produtoInativo =0,
quantidade =1, precoLivre =0, possuiSubItens =0, listaSubItens =0, produtograde =0,BALANCACAIXA=0,
etiqueta =0, estoqueminimo =0, balancacaixa =0,gradeprodutos=0,idunidadecompra=1,PESOBRUTO=0,PESOLIQUIDO=0,
percentualComissaoPrazo = 0.00, tipoComissao = 0,
valorComissaoPrazo = 0.00, valorComissaoVista = 0.00,ultimaquantidadecomprada=0, dataUltimaCompra = NULL,
horaAlteracao = NULL, idFamilia = NULL, dataAlteracao = NULL, alteradoMultiLoja = ',', codigointerno = id,
alteradoEm = '', localizacao = '', percentualComissao = 0, percentualMaximoDesconto = 0, produtoGrade = NULL,
alteradoMultiLoja = ',';

--VERIFICA VALORES
UPDATE produotos SET valorVenda=valorcusto WHERE valorvenda IS NULL OR valorVenda < valorCusto;
UPDATE produotos SET valorVenda=0.01 WHERE valorvenda IS NULL OR valorvenda = 0.00;
UPDATE produotos SET valorVendaAtacado=0.01 WHERE valorvendaAtacado IS NULL OR valorvendaAtacado = 0.00;
UPDATE produotos SET valorVendaEtiqueta = valorvenda,VALORCOMPRA=VALORCUSTO;
UPDATE produotos SET valorCusto = valorvenda WHERE valorcusto > valorvenda OR valorcusto IS NULL;
UPDATE produotos SET valorCompra=0 WHERE valorcompra IS NULL;
UPDATE produotos SET gtin = referencia WHERE GTIN IS NULL OR gtin='';
UPDATE produotos SET gtin = TRIM(LEADING '0' FROM gtin);

--TRATAMENTO DE CODIGO DE BARRAS
UPDATE produotos SET gtin = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(gtin,'A',''),'B',''),'C',''),'D', ''),'E', ''),'F', ''),'G', ''),'H', ''),'I', ''),'J', ''),'K', ''),'L', ''),'M', ''),'N', ''),'O', ''),'P', ''),'Q', ''),'R', ''),'S', ''),'T', ''),'U', ''),'V', ''),'W', ''),'X', ''),'Y', ''),'Z', '');
update produotos set gtin = replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(gtin,'a',''),'b',''),'c',''),'d', ''),'e', ''),'f', ''),'g', ''),'h', ''),'i', ''),'j', ''),'k', ''),'l', ''),'m', ''),'n', ''),'o', ''),'p', ''),'q', ''),'r', ''),'s', ''),'t', ''),'u', ''),'v', ''),'w', ''),'x', ''),'y', ''),'z', '');
UPDATE produotos SET gtin = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(gtin,'Á',''),'É',''),'Í',''),'Ó', ''),'Ú', ''),'á', ''),'é', ''),'í', ''),'ó', ''),'ú', ''),'Â', ''),'Ê', ''),'Ô', ''),'â', ''),'ê', ''),'ô', ''),'À', ''),'à', ''),'Ü', ''),'ü', ''),'Ç', ''),'ç', ''),'Ñ', ''),'ñ', ''),'Ã', ''),'Õ', '');
UPDATE produotos SET gtin = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(gtin,'õ',''),'ä',''),'ë',''),'ï', ''),'ö', ''),'ü', ''),'ÿ', ''),'Ä', ''),'Ë', ''),'Ï', ''),'Ö', ''),'Ü', ''),'Ÿ', ''),'å', ''),'Å', ''),'æ', ''),'Æ', ''),'œ', ''),'Œ', ''),'.', ''),'|', ''),' ', ''),',', ''),'!', ''),'@', ''),'/', '');
UPDATE produotos SET gtin = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(gtin,'ã',''),'-',''),'-',''),'%', ''),'$', ''),'¨', ''),'&', ''),'*', ''),'(', ''),')', ''),'+', ''),'=', ''),'§', ''),':', ''),';', ''),'?', ''),'¿', ''),' ', ''),'^', ''),'~', ''),'{', ''),'}', ''),'´', ''),'`', ''),'_', ''),'º', '');
UPDATE produotos SET gtin = REPLACE(REPLACE(REPLACE(gtin,'[',''),']',''),'¬','');

--COLOCA GTINTRIBUTAVEL NULO ONDE NAO EXISTE GTIN TRIBUTAVEL
UPDATE produotos SET gtintributavel=NULL WHERE LENGTH(gtintributavel)<=11;
UPDATE produotos SET gtinTributavel = gtin WHERE length(gtin)>=13;
UPDATE produotos SET GTINETIQUETAS = GTIN;

--SELECIONA PRODUTO COM NCM QUE NAO EXISTE NA TABELA DO HERA
SELECT DISTINCT id,nome,gtin,codigoncm FROM produotos p WHERE NOT EXISTS (SELECT * FROM ncm n WHERE n.codncm = p.codigoncm);

--ZERO A ESQUERDA
update produotos set codigoncm= concat('0',codigoncm) where length (codigoncm)<8;

--ATUALIZA NCM DOS PRODUTOS COM NCM QUE NAO EXISTEM NA TABELA DO HERA
UPDATE produotos AS p SET codigoncm = '62046300' WHERE codigoncm IS NULL or LENGTH(codigoncm)<=7 or LENGTH(codigoncm)>=9;

--ATUALIZA TABELA CEST PARA OS NCM EXISTENTES
UPDATE produotos SET codigocest=concat('0',codigocest) WHERE length(codigocest)<7;

UPDATE produotos AS p SET codigocest = '' WHERE codigocest IS NULL or LENGTH(codigocest)<=6 or LENGTH(codigocest)>=8;

update produotos AS p SET codigocest = (SELECT cest FROM tabelacest tc 
WHERE substring(p.codigoncm,1,2)= substring(tc.ncm,1,2) limit 1)  WHERE codigocest IS NULL;

--VERIFICA SE EXISTE GTIN DUPLICADO
SELECT distinct id,referencia,gtin,gtintributavel FROM produotos GROUP by gtin having count(*) > 1;

-- ATUALIZA GTIN ADICIONANDO A REFERENCIA
UPDATE produotos SET gtin = referencia   WHERE  EXISTS  ( SELECT gtin FROM(SELECT gtin from produotos)  
AS tmpb WHERE produotos.gtin = tmpb.gtin GROUP BY gtin HAVING COUNT(gtin) > 1);

--ATUALIZA GTIN ADICIONANDO GTIN e ID
UPDATE produotos SET gtin = CONCAT(id,gtin)   WHERE  EXISTS  ( SELECT gtin FROM(SELECT gtin from produotos)  
AS tmpb WHERE produotos.gtin = tmpb.gtin GROUP BY gtin HAVING COUNT(gtin) > 1);

--QUANDO GTIN FOR TRIBUTAVEL
UPDATE produotos SET gtin = CONCAT(id,codigoInterno) WHERE EXISTS (SELECT gtin FROM(SELECT gtin FROM produotos)
AS tmpb WHERE produotos.gtin = tmpb.gtin GROUP BY gtin HAVING COUNT(gtin) > 1); 

--QUANDO FOR PARA INATIVAR PRODUTO COM CODIGO DUPLICADO
UPDATE produotos SET produtoInativo = 1 WHERE EXISTS (SELECT gtin FROM(SELECT gtin FROM produotos)
AS tmpb WHERE produotos.gtin = tmpb.gtin GROUP BY gtin HAVING COUNT(gtin) > 1);

UPDATE produotos t1
JOIN (
    SELECT MIN(id) AS min_id
    FROM produotos
    GROUP BY gtin
    HAVING COUNT(*) > 1
) t2 ON t1.id = t2.min_id
SET t1.produtoInativo = 0;


--VERIFICA SE EXISTE NOME DUPLICADO
SELECT distinct id,nome FROM produotos GROUP by nome having count(*) > 1;

--ATUALZIA NOME E ADICIONA CODIGO INTERNO
UPDATE produotos SET nome = CONCAT(nome,' ',codigoInterno) WHERE EXISTS (SELECT nome FROM(SELECT nome FROM produotos)  
AS tmpb WHERE produotos.nome = tmpb.nome GROUP BY nome HAVING COUNT(nome) > 1);

--ATUALIZA PRODUTO BALANCA
UPDATE produotos SET balancacaixa=1,produtobalanca=1 where idunidade=2

--VERIFICA ESTOQUE
update produotos set estoqueatual=0 where estoqueatual is null or estoqueatual < -999999 or estoqueatual > 999999;

--ATUALIZAR MARKUP
UPDATE PRODUOTOS SET MARKUP = ((valorVenda / Round(valorCusto,2)) * 100) - 100;
UPDATE PRODUOTOS SET MARKUP = 0 WHERE MARKUP IS NULL OR MARKUP = '' OR MARKUP = 0;
UPDATE PRODUOTOS SET MARKUPATACADO = ((valorVendaAtacado / Round(valorCusto,2)) * 100) - 100;
UPDATE PRODUOTOS SET MARKUPATACADO = 0 WHERE MARKUPATACADO IS NULL OR MARKUPATACADO = '' OR MARKUP = 0;

--VERIFICAÇÕE BASICAS
UPDATE produotos SET idUnidade = 1 WHERE idUnidade IS NULL OR idUnidade = 0;
UPDATE produotos SET idFiscal = 1 WHERE idFiscal IS NULL OR idFiscal = 0;
UPDATE produotos SET idFornecedor = 1 WHERE idFornecedor IS NULL OR idFornecedor = 0;
UPDATE produotos SET idGrupo = 1 WHERE idGrupo IS NULL OR idGrupo = 0;
UPDATE produotos SET idSetor = 1 WHERE idSetor IS NULL OR idSetor = 0;
UPDATE produotos SET idSubGrupo = 1 WHERE idSubGrupo IS NULL OR idSubGrupo = 0;

--PEGA O CAMPO OBSERVACAO E TRANSFORMA EM SETOR
INSERT INTO setores(nome,excluido,idmatriz) SELECT UPPER(observacao), 0, 1 FROM produotos WHERE observacao IS NOT NULL GROUP BY observacao;
UPDATE PRODUOTOS AS P INNER JOIN SETORES AS S ON P.observacao=S.nome SET P.IDSETOR=S.ID;
--PEGA O CAMPO DESCRICAOPDV E TRANSFORMA EM GRUPO
INSERT INTO grupos(nome,excluido,idmatriz) SELECT UPPER(descricaoPDV), 0, 1 FROM produotos WHERE descricaoPDV IS NOT NULL GROUP BY descricaoPDV;
UPDATE PRODUOTOS AS P INNER JOIN GRUPOS AS S ON P.descricaoPDV=S.NOME SET P.IDGRUPO=S.ID;
--PEGA O CAMPO DESCRICAOETIQUETAS E TRANSFORMA EM GRUPO
INSERT INTO subgrupos(nome,excluido,idmatriz) SELECT UPPER(descricaoEtiquetas), 0, 1 FROM produotos WHERE descricaoEtiquetas IS NOT NULL GROUP BY descricaoEtiquetas;
UPDATE PRODUOTOS AS P INNER JOIN SUBGRUPOS AS S ON P.descricaoEtiquetas=S.NOME SET P.IDSUBGRUPO=S.ID;

--ATUALIZA NOME
UPDATE produotos SET nome = trim(UPPER(nome)), descricaopdv = nome, descricaoetiquetas = nome;

-- historicoatualizacoesprodutos
INSERT INTO historicoatualizacoesprodutos (alteradoEm, custoOperacionalAnterior, custoOperacionalAtual, dataHoraAlteracao, estoqueAnterior, estoqueAtual, margemAnterior, margemAtual, primeiroCadastro, valorCompraAnterior, valorCompraAtual, valorCustoAnterior, valorCustoAtual, valorVendaAnterior, valorVendaAtual, idProduto, idUsuario, margemAnteriorAtacado, valorVendaAnteriorAtacado)
SELECT 
    'Conversao de Banco de Dados',
    custoOperacional,
    custoOperacional,
    NOW(),
    estoqueAtual,
    estoqueAtual,
    markup,
    markup,
    1,
    valorCompra,
    valorCompra,
    valorCusto,
    valorCusto,
    valorVenda,
    valorVenda,
    id,
    1,
    markup,
    markupAtacado
FROM 
    produotos;
_______________________________________________________________________________________________________________________
INSERIR NCM E CEST DA TABELA PLAN1
________________________________________________________________________________________________________________________
-- PLAN1
//LIGAR NCM E CEST EM PRODUTOS COM GTINTRIB
UPDATE produotos AS p INNER JOIN plan1 as pl on p.gtin=pl.gtin set p.codigoncm=pl.ncm,p.codigocest=pl.cest;

//ALTERAR PERFIL TRIBUTARIO
UPDATE produotos SET idfiscal=2 WHERE codigocest IS NOT NULL;
________________________________________________________________________________________________________________________
FINANCEIRO
________________________________________________________________________________________________________________________
-- CONECTA PESSOAS COM CONTAS RECEBER A PARTIR DA OBSERVACAO
UPDATE pessoas INNER JOIN contasreceber ON pessoas.observacao=contasreceber.observacao SET contasreceber.ID_CLIENTE=pessoas.id;

________________________________________________________________________________________________________________________
TRATAMENTO DE DADOS PESSOAS
________________________________________________________________________________________________________________________

UPDATE pessoas SET  limiteCompraUsado =0, limiteValeFuncionario =0, limiteValeFuncionarioUsado =0, percentualComissaoPrazo =0, percentualComissaoVista =0, excluido ='N', ID_PAIS = 1, limite = 0, status = 1, idLoja = 0, quantidadeAlterados = 0, alteradoMultiLoja = ',';

UPDATE pessoas SET nome = replace( nome, '  ', ' ' );
UPDATE pessoas SET nomeFantasia = nome WHERE nomeFantasia IS NULL OR nomeFantasia = '';

UPDATE pessoas SET inativo = 1 WHERE  EXISTS  ( SELECT cnpj FROM(SELECT cnpj from pessoas)  
AS tmpb WHERE pessoas.cnpj = tmpb.cnpj GROUP BY cnpj HAVING COUNT(cnpj) > 1);

UPDATE pessoas SET cnpj = replace( cnpj, '-', '' );
UPDATE pessoas SET cnpj = replace( cnpj, '/', '' );
UPDATE pessoas SET cnpj = replace( cnpj, '.', '' );
UPDATE pessoas SET cpf = replace( cpf, '-', '' );
UPDATE pessoas SET cpf = replace( cpf, '/', '' );
UPDATE pessoas SET cpf = replace( cpf, '.', '' );
UPDATE pessoas SET cep = replace( cep, '-', '' );
UPDATE pessoas SET cep = replace( cep, '/', '' );
UPDATE pessoas SET cep = replace( cep, '.', '' );
UPDATE pessoas SET inscricaoEstadual = replace( inscricaoEstadual, '-', '' );
UPDATE pessoas SET inscricaoEstadual = replace( inscricaoEstadual, '/', '' );
UPDATE pessoas SET inscricaoEstadual = replace( inscricaoEstadual, '.', '' );


//Verifica se existe nomes duplicados
select distinct id,nome,cnpj, count(*)  from pessoas GROUP by cnpj having count(*) > 1

//Atualiza nome adiciona codigo id
UPDATE pessoas SET nome = CONCAT(nome,' ',id)   WHERE  EXISTS  ( SELECT nome FROM(SELECT nome from pessoas)  
AS tmpb WHERE pessoas.nome = tmpb.nome GROUP BY nome HAVING COUNT(nome) > 1);

/Ativa cliente
update pessoas set cliente = 1 
update pessoas set fornecedor = 1
//enviar carga
update pessoas set sincronizado = ',';

//CPF E CNPJ JUNTOS
update pessoas set cpf=cnpj,cnpj=null where length(cnpj)<=11

UPDATE pessoas SET cpf=concat('0',cpf) WHERE length(cpf)<11;
UPDATE pessoas SET cnpj=concat('0',cnpj) WHERE length(cnpj)<14;



//QUANDO PESSOA E ISENTA
update pessoas set inscricaoEstadual = null, indicadorIEDestinatario = 2 where inscricaoEstadual = 'ISENTO';
update pessoas set inscricaoEstadual = null, indicadorIEDestinatario = 3 where inscricaoEstadual = 'NAO CONTRIBUINTE';

UPDATE pessoas SET  cidade  = trim(UPPER( cidade )),  bairro  = trim(UPPER( bairro )),  logradouro  = trim(UPPER( logradouro ));

//Verifica se existe nomes duplicados
select distinct id,nome  from pessoas GROUP by nome having count(*) > 1   

//Atualiza nome adiciona codigo id
UPDATE pessoas SET inativo = 1 WHERE  EXISTS  ( SELECT nome FROM(SELECT nome from pessoas)  
AS tmpb WHERE pessoas.nome = tmpb.nome GROUP BY nome HAVING COUNT(nome) > 1);


UPDATE pessoas SET cidade = 'MAGE', codigoMunicipio = '3302502', UF = 'RJ' WHERE UF = NULL;

UPDATE pessoas SET cidade = 'RIO DE JANEIRO', codigoMunicipio = '3304557', UF = 'RJ' WHERE cidade IS NULL;
 

--------------------------------------------